// Code generated by github.com/99designs/gqlgen, DO NOT EDIT.

package model

import (
	"fmt"
	"io"
	"strconv"
)

type Entity interface {
	IsEntity()
}

type Expression struct {
	Key      string      `json:"key"`
	Operator string      `json:"operator"`
	Value    interface{} `json:"value"`
}

type Filter struct {
	Expressions []*Expression `json:"expressions"`
	Limit       *int          `json:"limit"`
	Offset      *int          `json:"offset"`
	OrderBy     *OrderBy      `json:"order_by"`
}

type Key struct {
	Type string `json:"type"`
	ID   string `json:"id"`
}

type Node struct {
	ID              string                 `json:"id"`
	Type            string                 `json:"type"`
	Properties      map[string]interface{} `json:"properties"`
	GetProperty     interface{}            `json:"getProperty"`
	SetProperties   bool                   `json:"setProperties"`
	DelProperty     bool                   `json:"delProperty"`
	GetRelationship *Relationship          `json:"getRelationship"`
	AddRelationship *Relationship          `json:"addRelationship"`
	DelRelationship bool                   `json:"delRelationship"`
	Relationships   []*Relationship        `json:"relationships"`
}

func (Node) IsEntity() {}

type OrderBy struct {
	Field   string `json:"field"`
	Reverse *bool  `json:"reverse"`
}

type Relationship struct {
	ID            string                 `json:"id"`
	Type          string                 `json:"type"`
	Properties    map[string]interface{} `json:"properties"`
	GetProperty   interface{}            `json:"getProperty"`
	SetProperties bool                   `json:"setProperties"`
	DelProperty   bool                   `json:"delProperty"`
	Source        *Node                  `json:"source"`
	Target        *Node                  `json:"target"`
}

func (Relationship) IsEntity() {}

type Direction string

const (
	DirectionOutgoing Direction = "OUTGOING"
	DirectionIncoming Direction = "INCOMING"
)

var AllDirection = []Direction{
	DirectionOutgoing,
	DirectionIncoming,
}

func (e Direction) IsValid() bool {
	switch e {
	case DirectionOutgoing, DirectionIncoming:
		return true
	}
	return false
}

func (e Direction) String() string {
	return string(e)
}

func (e *Direction) UnmarshalGQL(v interface{}) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = Direction(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid Direction", str)
	}
	return nil
}

func (e Direction) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}
