scalar Map

scalar Any

input Key {
  type: String!
  id: String!
}

enum Operator {
  EQ
  NEQ
  GT
  LT
  GTE
  LTE
  CONTAINS
  HAS_PREFIX
  HAS_SUFFIX
}

input Expression {
  key: String!
  operator: Operator!
  value: Any!
}

input Filter {
  expressions: [Expression!]
  page_size: Int
  page: Int
  order_by: OrderBy
}

input OrderBy {
  field: String!
  reverse: Boolean
}

enum Direction {
  OUTGOING
  INCOMING
}

interface Entity {
  id: String!
  type: String!
  properties: Map!
  getProperty(key: String!): Any
  setProperties(properties: Map!): Boolean!
  delProperty(key: String!): Boolean!
}

type Node implements Entity {
  id: String!
  type: String!
  properties: Map!
  getProperty(key: String!): Any
  setProperties(properties: Map!): Boolean!
  delProperty(key: String!): Boolean!
  getRelationship(direction: Direction!, relationship: String!, id: String!): Relationship!
  addRelationship(direction: Direction!, relationship: String!, nodeKey: Key!): Relationship!
  delRelationship(direction: Direction!, key: Key!): Boolean!
  relationships(direction: Direction!, type: String!, filter: Filter): [Relationship!]
}

type Relationship implements Entity {
  id: String!
  type: String!
  properties: Map!
  getProperty(key: String!): Any
  setProperties(properties: Map!): Boolean!
  delProperty(key: String!): Boolean!
  source: Node!
  target: Node!
}

type Query {
  types: [String!]
  get(key: Key!): Node!
  list(type: String!, filter: Filter!): [Node!]
  size: Int!
}

type Mutation {
  add(type: String!, properties: Map): Node!
  set(type: String!, id: String!, properties: Map): Node!
  del(key: Key!): Boolean!
}
