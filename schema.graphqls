scalar Map

scalar Any

input Key {
    type: String!
    id: String!
}

enum Operator {
    EQ
    NEQ
    GT
    LT
    GTE
    LTE
    CONTAINS
    HAS_PREFIX
    HAS_SUFFIX
}

enum AggregateFunction {
    SUM
    COUNT
    AVG
    MAX
    MIN
}

input Expression {
    key: String!
    operator: Operator!
    value: Any!
}

input NodeWhere {
    cursor: String
    type: String!
    expressions: [Expression!]
    page_size: Int
    order_by: OrderBy
}

input RelationWhere {
    cursor: String
    direction: Direction!
    relation: String!
    target_type: String!
    expressions: [Expression!]
    page_size: Int
    order_by: OrderBy
}

input OrderBy {
    field: String!
    reverse: Boolean
}

enum Direction {
    OUTGOING
    INCOMING
}

interface Entity {
    id: String!
    type: String!
    properties: Map!
    getProperty(key: String!): Any
    setProperties(properties: Map!): Boolean!
    delProperty(key: String!): Boolean!
}

type Node implements Entity {
    id: String!
    type: String!
    properties: Map!
    getProperty(key: String!): Any
    setProperties(properties: Map!): Boolean!
    delProperty(key: String!): Boolean!
    getRelation(relation: String!, id: String!): Relation!
    addRelation(direction: Direction, relation: String!, properties: Map, nodeKey: Key!): Relation!
    delRelation(key: Key!): Boolean!
    relations(where: RelationWhere!): Relations!
    addIncomingNode(relation: String!, properties: Map, addNode: AddNode!): Node!
    addOutboundNode(relation: String!, properties: Map, addNode: AddNode!): Node!
}

type Relation implements Entity {
    id: String!
    type: String!
    properties: Map!
    getProperty(key: String!): Any
    setProperties(properties: Map!): Boolean!
    delProperty(key: String!): Boolean!
    source: Node!
    target: Node!
}

type Relations {
    cursor: String!
    values: [Relation!]
    agg(fn: AggregateFunction!, field: String!): Float!
}

type Nodes {
    cursor: String!
    values: [Node!]
    agg(fn: AggregateFunction!, field: String!): Float!
}

input AddNode {
    type: String!
    id: String
    properties: Map
}

input SetNode {
    type: String!
    id: String!
    properties: Map
}


type Query {
    types: [String!]
    get(key: Key!): Node!
    list(where: NodeWhere!): Nodes!


    add(add: AddNode!): Node!
    set(set: SetNode!): Node!
    del(del: Key!): Boolean!
    bulkAdd(add: [AddNode!]): Boolean!
    bulkSet(set: [SetNode!]): Boolean!
    bulkDel(del: [Key!]): Boolean!

    login(username: String!, password: String!): String!
}

