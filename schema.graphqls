scalar Map

scalar Any

enum Role {
  READER
  WRITER
  ADMIN
  CLUSTER_PEER
}

input Key {
  type: String!
  id: String!
}

enum Operator {
  EQ
  NEQ
  GT
  LT
  GTE
  LTE
  CONTAINS
  HAS_PREFIX
  HAS_SUFFIX
}

input Expression {
  key: String!
  operator: Operator!
  value: Any!
}

input Filter {
  cursor: String
  type: String!
  expressions: [Expression!]
  page_size: Int
  order_by: OrderBy
}

input OrderBy {
  field: String!
  reverse: Boolean
}

enum Direction {
  OUTGOING
  INCOMING
}

interface Entity {
  id: String!
  type: String!
  properties: Map!
  getProperty(key: String!): Any
  setProperties(properties: Map!): Boolean!
  delProperty(key: String!): Boolean!
}

type Node implements Entity {
  id: String!
  type: String!
  properties: Map!
  getProperty(key: String!): Any
  setProperties(properties: Map!): Boolean!
  delProperty(key: String!): Boolean!
  getRelationship(direction: Direction!, relationship: String!, id: String!): Relationship!
  addRelationship(direction: Direction!, relationship: String!, nodeKey: Key!): Relationship!
  delRelationship(direction: Direction!, key: Key!): Boolean!
  relationships(direction: Direction!, filter: Filter): Relationships!
}

type Relationship implements Entity {
  id: String!
  type: String!
  properties: Map!
  getProperty(key: String!): Any
  setProperties(properties: Map!): Boolean!
  delProperty(key: String!): Boolean!
  source: Node!
  target: Node!
}

type Relationships {
  cursor: String!
  relationships: [Relationship!]
}

type Nodes {
  cursor: String!
  nodes: [Node!]
}

input AddNode {
  type: String!
  id: String
  properties: Map
}

input SetNode {
  type: String!
  id: String!
  properties: Map
}

type Cluster {
  addPeer(peerID: String!, addr: String!): Boolean!
}

type Graph {
  types: [String!]
  get(key: Key!): Node!
  list(filter: Filter!): Nodes!
  size: Int!

  add(add: AddNode!): Node!
  set(set: SetNode!): Node!
  del(del: Key!): Boolean!
  bulkAdd(add: [AddNode!]): Boolean!
  bulkSet(set: [SetNode!]): Boolean!
  bulkDel(del: [Key!]): Boolean!
}

type Query {
  graph: Graph!
  cluster: Cluster!
}
