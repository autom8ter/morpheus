scalar Map

scalar Any

input Key {
  type: String!
  id: String!
}

input Expression {
  key: String!
  operator: String!
  value: Any!
}

input Filter {
  expressions: [Expression!]
  limit: Int
  offset: Int
  sort: String
}

enum Direction {
  OUTGOING
  INCOMING
}

interface Entity {
  id: String!
  type: String!
  properties(input: String): Map!
  getProperty(key: String!): Any
  setProperties(properties: Map!): Boolean!
  delProperty(key: String!): Boolean!
}

type Node implements Entity {
  id: String!
  type: String!
  properties(input: String): Map!
  getProperty(key: String!): Any
  setProperties(properties: Map!): Boolean!
  delProperty(key: String!): Boolean!
  getRelationship(direction: Direction!, relationship: String!, id: String!): Relationship!
  addRelationship(direction: Direction!, relationship: String!, nodeKey: Key!): Relationship!
  delRelationship(direction: Direction!, key: Key!): Boolean!
  relationships(direction: Direction!, type: String!, filter: Filter): [Relationship!]
}

type Relationship implements Entity {
  id: String!
  type: String!
  properties(input: String): Map!
  getProperty(key: String!): Any
  setProperties(properties: Map!): Boolean!
  delProperty(key: String!): Boolean!
  source: Node!
  target: Node!
}


type Query {
  nodeTypes: [String!]
  getNode(key: Key!): Node!
  getNodes(type: String!, filter: Filter!): [Node!]
  size: Int!
}

type Mutation {
  addNode(type: String!, properties: Map): Node!
  delNode(key: Key!): Boolean!
}
